document.addEventListener('DOMContentLoaded', () => {
  // all logic related to fetching data from the server will go here
  // 1. get data from http://localhost:5000/tasks
  // 2. post data to http://localhost:5000/tasks
  // 3. patch data to http://localhost:5000/tasks
  // 4. put data to http://localhost:5000/tasks
  // 4. delete data from http://localhost:5000/tasks
  // fetch() method --> is used to make requests to a server and get, send, delete data
  // get new tasks, add tasks, update tasks, delete tasks

  const apiUrl = 'http://localhost:5000/tasks';

  const taskList = document.getElementById('taskList');
  //   console.log(taskList);

  // 1. GET request --> getting all tasks
  fetch(apiUrl) // fetch --> sending a GET request to the server
    .then((response) => {
      //   console.log(response);
      //   if (!response.ok) {
      //     throw new Error(`HTTP error! Status: ${res.status}`);
      //   }
      return response.json();
      //   return response.json(); // parsing the response to json
    }) // first then --> parses our response to json
    .then((data) => {
      // second then --> action on the data
      // call function for rendering tasks on the page
      //   console.log(data);
      data.forEach((task) => renderTask(task));
    })
    .catch((error) => {
      // catch --> if there is an error
      console.error('Error:', error);
    });

  // 2. POST request --> add a task to the UI --> create a task
  const taskInput = document.getElementById('taskInput');
  const submitBtn = document.getElementById('submitBtn');
  submitBtn.addEventListener('click', function () {
    const taskTextValue = taskInput.value.trim();
    if (taskTextValue === '') {
      alert('Please enter a task');
      return;
    }

    const newTask = {
      // id value is auto-generated by the server
      text: taskTextValue, // string
      completed: false, // boolean
    };
    console.log(newTask);

    fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      // headers --> specify the type of data we are sending to the server
      // --> authorization
      body: JSON.stringify(newTask),
    })
      .then((response) => response.json())
      .then((data) => {
        renderTask(data);
      })
      .catch((error) => {
        console.error('Error:', error);
      });
  });

  // Render a task in the UI
  function renderTask(task) {
    // task will be an object
    const newTaskListItem = document.createElement('li');
    newTaskListItem.classList.add('task');
    newTaskListItem.dataset.id = task.id; // store task for deletion purposes
    const taskText = document.createElement('span');
    taskText.classList.add('task-text');
    taskText.textContent = task.text;
    newTaskListItem.appendChild(taskText);

    // create a checkbox
    // 3. PATCH method --> update a task's completion status
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.checked = task.completed;
    checkbox.classList.add('task-checkbox');
    if (task.completed) {
      taskText.style.textDecoration = 'line-through';
    }

    // toggle completion state when checkbox is clicked
    checkbox.addEventListener('change', function () {
      //   if (checkbox.checked) {
      //     taskText.style.textDecoration = 'line-through';
      //   } else {
      //     taskText.style.textDecoration = 'none';
      //   }
      // http://localhost:5000/tasks/1 --> `${apiUrl}/${task.id}`
      task.completed = checkbox.checked;
      fetch(`${apiUrl}/${task.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ completed: task.completed }),
      }).catch((err) => console.error(err));
      newTaskListItem.style.textDecoration = task.completed
        ? 'line-through'
        : 'none';
    });

    // exercise add an edit button
    // hints -- still uses the PATCH method --> update a task's text
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Edit';
    editBtn.classList.add('edit-btn');
    // attach an editing event listener to the editBtn when clicked
    editBtn.addEventListener('click', () => {
      const newText = prompt('Edit your task:', taskText.textContent);
      if (newText !== null) {
        taskText.textContent = newText.trim() || taskText.textContent;
      }
    });

    // add delete button
    // uses DELETE method --> task is completely deleted from the server
    const deleteBtn = document.createElement('button');
    deleteBtn.textContent = 'Delete';
    deleteBtn.classList.add('delete-btn');

    // add event for deleting to the deleteBtn
    deleteBtn.addEventListener('click', () => {
      fetch(`${apiUrl}/${task.id}`, { method: 'DELETE' })
        .then(() => newTaskListItem.remove())
        .catch((error) => console.error('Error deleting task: ', error));
    });

    // append the editBtn to our task list item
    newTaskListItem.appendChild(editBtn);
    // append the deleteBtn to the end of the newTaskListItem
    newTaskListItem.appendChild(deleteBtn);
    // append checkbox to the task item
    newTaskListItem.prepend(checkbox);
    //append new task to the task list
    taskList.appendChild(newTaskListItem);
  }
});
